ALTER TABLE COMPANY ADD 
USE_SHIFT_PROFILES DM_BOOLEAN NOT NULL;

UPDATE COMPANY 
SET USE_SHIFT_PROFILES = '0' 
WHERE USE_SHIFT_PROFILES IS NULL;

ALTER TABLE EMPLOYEE ADD
SHIFT_PROFILE_KEY DM_KEY;

UPDATE EMPLOYEE
SET SHIFT_PROFILE_KEY = '0' 
WHERE SHIFT_PROFILE_KEY IS NULL;

ALTER TABLE SHIFT ADD 
IS_LEAVE_SHIFT DM_BOOLEAN NOT NULL;

UPDATE SHIFT
SET IS_LEAVE_SHIFT = '0' 
WHERE IS_LEAVE_SHIFT IS NULL;

CREATE GENERATOR SHIFT_LINKED_PROFILE_GEN;

SET GENERATOR SHIFT_LINKED_PROFILE_GEN TO 1;

CREATE TABLE SHIFT_LINKED_PROFILE
(
  SHIFT_LINKED_PROFILE_KEY DM_KEY NOT NULL,
  SHIFT_KEY DM_KEY_N1 DEFAULT -1,
  PROFILE_KEY DM_KEY_N1 DEFAULT -1,
  DELETED DM_BOOLEAN DEFAULT 0,
  ACTIVE_RECORD DM_ACTIVE DEFAULT 1,
  PRIMARY KEY (SHIFT_LINKED_PROFILE_KEY)
);

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON SHIFT_LINKED_PROFILE TO  SYSDBA WITH GRANT OPTION;

CREATE TRIGGER TR_SHIFT_LINKED_PROFILE FOR SHIFT_LINKED_PROFILE ACTIVE
BEFORE INSERT POSITION 0
AS
begin
  if (new.SHIFT_LINKED_PROFILE_KEY is null)
  then begin
         new.SHIFT_LINKED_PROFILE_KEY = gen_id(SHIFT_LINKED_PROFILE_GEN, 1);
       end
end

CREATE GENERATOR SHIFT_PROFILES_GEN;

SET GENERATOR SHIFT_PROFILES_GEN TO 1;

CREATE TABLE SHIFT_PROFILE
(
  SHIFT_PROFILE_KEY DM_KEY NOT NULL,
  COMPANY_KEY DM_KEY,
  SHIFT_PROFILE_NAME DM_NAME,
  DELETED DM_BOOLEAN DEFAULT 0,
  ACTIVE_RECORD DM_ACTIVE DEFAULT 1,
  PRIMARY KEY (SHIFT_PROFILE_KEY)
);

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON SHIFT_PROFILE TO  SYSDBA WITH GRANT OPTION;

CREATE TRIGGER TR_SHIFT_PROFILE FOR SHIFT_PROFILE ACTIVE
BEFORE INSERT POSITION 0
AS
begin
  if (new.SHIFT_PROFILE_KEY is null)
  then begin
         new.SHIFT_PROFILE_KEY = gen_id(SHIFT_PROFILES_GEN, 1);
       end
end

delete from EMPLOYEE_ATTENDANCE_AMENDED where 1=1;

insert into EMPLOYEE_ATTENDANCE_AMENDED select * from EMPLOYEE_ATTENDANCE_DATA;

CREATE TABLE CLOCKING_AMEND_CODE
(
    CLOCKING_AMEND_CODE_KEY DM_KEY NOT NULL,
    COMPANY_KEY DM_KEY,
    AMEND_CODE CHAR(2),
    REASON VARCHAR(30),
    ACTIVE_RECORD DM_ACTIVE DEFAULT 1,
    DELETED  DM_BOOLEAN DEFAULT 0
);

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON SHIFT_LINKED_PROFILE TO  SYSDBA WITH GRANT OPTION;

CREATE UNIQUE INDEX IDX_CLOCKING_AMEND_CODE1 ON CLOCKING_AMEND_CODE
  (AMEND_CODE);

CREATE GENERATOR CLOCKING_AMEND_CODE_GEN;

SET GENERATOR CLOCKING_AMEND_CODE_GEN TO 1;

CREATE TRIGGER TR_CLOCKING_AMEND_CODE FOR CLOCKING_AMEND_CODE ACTIVE
BEFORE INSERT POSITION 0
AS
begin
  if (new.CLOCKING_AMEND_CODE_KEY is null)
  then begin
         new.CLOCKING_AMEND_CODE_KEY = gen_id(CLOCKING_AMEND_CODE_GEN, 1);
       end
end

ALTER TABLE ATTENDANCE ADD 
CLOCKING_AMEND_CODE_KEY DM_KEY DEFAULT -1;

UPDATE ATTENDANCE 
SET CLOCKING_AMEND_CODE_KEY = -1 
WHERE CLOCKING_AMEND_CODE_KEY IS NULL;

ALTER TABLE EMPLOYEE_ATTENDANCE_DATA ADD 
AMEND_CODES VARCHAR(10);

ALTER TABLE EMPLOYEE_ATTENDANCE_AMENDED ADD 
AMEND_CODES VARCHAR(10);

DELETE FROM EMPLOYEE_ATTENDANCE_AMENDED WHERE 1 = 1;

INSERT INTO EMPLOYEE_ATTENDANCE_AMENDED SELECT * FROM EMPLOYEE_ATTENDANCE_DATA;

EXECUTE BLOCK AS BEGIN
if (exists(select 1 from RDB$TRIGGERS where rdb$trigger_name = 'EMPLOYEE_ATTENDANCE_DATA_DELETE')) then 
execute statement 'DROP TRIGGER EMPLOYEE_ATTENDANCE_DATA_DELETE;';
END

EXECUTE BLOCK AS BEGIN
if (exists(select 1 from rdb$TRIGGERS where rdb$trigger_name = 'EMPLOYEE_ATTENDANCE_DATA_UPDATE')) then 
execute statement 'DROP TRIGGER EMPLOYEE_ATTENDANCE_DATA_UPDATE;';
END

EXECUTE BLOCK AS BEGIN
if (exists(select 1 from rdb$TRIGGERS where rdb$trigger_name = 'EMPLOYEE_ATTENDANCE_DATA_INSERT')) then 
execute statement 'DROP TRIGGER EMPLOYEE_ATTENDANCE_DATA_INSERT;';
END

create trigger EMPLOYEE_ATTENDANCE_DATA_INSERT for EMPLOYEE_ATTENDANCE_DATA
  after insert 
  POSITION 0
as
begin
  INSERT INTO EMPLOYEE_ATTENDANCE_AMENDED 
    SELECT * FROM EMPLOYEE_ATTENDANCE_DATA 
    WHERE EMPLOYEE_ATTENDANCE_DATA_KEY = new.EMPLOYEE_ATTENDANCE_DATA_KEY;
end

create trigger EMPLOYEE_ATTENDANCE_DATA_UPDATE for EMPLOYEE_ATTENDANCE_DATA
  after update 
  POSITION 0
as
begin
  DELETE FROM EMPLOYEE_ATTENDANCE_AMENDED WHERE EMPLOYEE_ATTENDANCE_AMENDED_KEY = new.EMPLOYEE_ATTENDANCE_DATA_KEY;
  INSERT INTO EMPLOYEE_ATTENDANCE_AMENDED SELECT * FROM EMPLOYEE_ATTENDANCE_DATA WHERE EMPLOYEE_ATTENDANCE_DATA_KEY = new.EMPLOYEE_ATTENDANCE_DATA_KEY;
end;

create trigger EMPLOYEE_ATTENDANCE_DATA_DELETE for EMPLOYEE_ATTENDANCE_DATA
  after DELETE 
as
begin
  DELETE FROM EMPLOYEE_ATTENDANCE_AMENDED WHERE EMPLOYEE_ATTENDANCE_AMENDED_KEY = old.EMPLOYEE_ATTENDANCE_DATA_KEY;
end;

insert into PAYROLL_EXPORT_TEMPLATE (template_key,template_no,template) values (6,6,'NT,OT1,SAT,SUN,NSA,SA');

ALTER TABLE COMPANY ADD 
IQ_EXPORT_FILEPATH Varchar(80);

ALTER TABLE COMPANY ADD 
IQ_EXPORT_FILENAME Varchar(80);

ALTER TABLE COMPANY ADD 
IQ_COMPANY_CODE Varchar(3);

ALTER TABLE RESIDENT ADD 
DEVICE_CARDNUMBER VARCHAR(80);

ALTER TABLE SYSTEM_PARAMETER ADD 
DOCUMENT_FILE Varchar(80);

ALTER TABLE EMPLOYEE ADD 
EXPIRY_ENABLED SmallInt;

ALTER TABLE EMPLOYEE ADD 
EXPIRY_DATE Date;

ALTER TABLE EMPLOYEE ADD 
EXPIRY_TIME Time;

ALTER TABLE EMPLOYEE ADD 
EXPIRY_UNASSIGN SmallInt;

ALTER TABLE EMPLOYEE ADD 
EXPIRY_HANDLED SmallInt;

ALTER TABLE EMPLOYEE ADD 
EXPIRY_REASON VARCHAR(30);

ALTER TABLE EMPLOYEE ADD 
EXPIRY_DOC VARCHAR(80);

ALTER TABLE RESIDENT ADD 
EXPIRY_ENABLED SmallInt;

ALTER TABLE RESIDENT ADD 
EXPIRY_DATE Date;

ALTER TABLE RESIDENT ADD 
EXPIRY_TIME Time;

ALTER TABLE RESIDENT ADD 
EXPIRY_UNASSIGN SmallInt;

ALTER TABLE RESIDENT ADD 
EXPIRY_HANDLED SmallInt;

ALTER TABLE RESIDENT ADD 
EXPIRY_REASON VARCHAR(30);

ALTER TABLE RESIDENT ADD 
EXPIRY_DOC VARCHAR(80);

ALTER TABLE EMPLOYEE ADD 
EXCLUDE_PPH_IF_NO_SHIFT SmallInt DEFAULT 0;

UPDATE EMPLOYEE SET EXCLUDE_PPH_IF_NO_SHIFT = 0;
