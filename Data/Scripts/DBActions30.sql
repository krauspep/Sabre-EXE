CREATE GENERATOR PAYSLIP_HISTORY_GEN;
COMMIT;

CREATE GENERATOR EARNING_HISTORY_GEN;
COMMIT;

CREATE GENERATOR DEDUCTION_HISTORY_GEN;
COMMIT;


CREATE TABLE PAYSLIP_HISTORY (
    PAYSLIP_HISTORY_KEY              DM_KEY NOT NULL,
    EMPLOYEE_KEY                     DM_KEY NOT NULL,
    PAYSLIP_DATE                     DM_DATE,
    EARNING_TAXABLE                  DM_CURRENCY,
    EARNING_TOTAL                    DM_CURRENCY,
    TAXABLE_AMOUNT                   DM_CURRENCY,
    GROSS_PAY                        DM_CURRENCY,
    TOTAL_DEDUCTIONS                 DM_CURRENCY,
    NETT_PAY                         DM_CURRENCY,
    HISTORY                          DM_BOOLEAN,
    DELETED                          DM_BOOLEAN
);

ALTER TABLE PAYSLIP_HISTORY ADD PRIMARY KEY (PAYSLIP_HISTORY_KEY);

SET TERM ^ ;
CREATE TRIGGER TR_PAYSLIP_HISTORY FOR PAYSLIP_HISTORY
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.PAYSLIP_HISTORY_KEY is null)
  then begin
         new.PAYSLIP_HISTORY_KEY = gen_id(PAYSLIP_HISTORY_GEN, 1);
       end
end
^
SET TERM ; ^

COMMIT;

CREATE TABLE EARNING_HISTORY (
    EARNING_HISTORY_KEY              DM_KEY NOT NULL,
    PAYSLIP_HISTORY_KEY              DM_KEY NOT NULL,
    EMPLOYEE_EARNING_TYPE_KEY        DM_KEY NOT NULL,
    EARNING_DESCRIPTION              DM_NAME,
    TAXABLE_AMOUNT                   DM_CURRENCY,
    NON_TAXABLE_AMOUNT               DM_CURRENCY,
    TAXABLE_AMOUNT_YTD               DM_CURRENCY,
    NON_TAXABLE_AMOUNT_YTD           DM_CURRENCY,
    DELETED                          DM_BOOLEAN
);

ALTER TABLE EARNING_HISTORY ADD PRIMARY KEY (EARNING_HISTORY_KEY);


SET TERM ^ ;
CREATE TRIGGER TR_EARNING_HISTORY FOR EARNING_HISTORY
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.EARNING_HISTORY_KEY is null)
  then begin
         new.EARNING_HISTORY_KEY = gen_id(EARNING_HISTORY_GEN, 1);
       end
end
^
SET TERM ; ^

COMMIT;

CREATE TABLE DEDUCTION_HISTORY (
    DEDUCTION_HISTORY_KEY            DM_KEY NOT NULL,
    PAYSLIP_HISTORY_KEY              DM_KEY NOT NULL,
    EMPLOYEE_DEDUCTION_TYPE_KEY      DM_KEY NOT NULL,
    DEDUCTION_DESCRIPTION            DM_NAME,
    TAX_DEDUCTABLE_AMOUNT            DM_CURRENCY,
    NON_TAX_DEDUCTABLE_AMOUNT        DM_CURRENCY,
    TAX_DEDUCTABLE_YTD               DM_CURRENCY,
    NON_TAX_DEDUCTABLE_YTD           DM_CURRENCY,
    DELETED                          DM_BOOLEAN
);

ALTER TABLE DEDUCTION_HISTORY ADD PRIMARY KEY (DEDUCTION_HISTORY_KEY);


SET TERM ^ ;
CREATE TRIGGER TR_DEDUCTION_HISTORY FOR DEDUCTION_HISTORY
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.DEDUCTION_HISTORY_KEY is null)
  then begin
         new.DEDUCTION_HISTORY_KEY = gen_id(DEDUCTION_HISTORY_GEN, 1);
       end
end
^
SET TERM ; ^

COMMIT;


ALTER TABLE PAYROLL_CALCULATION_DATA
ADD UIF DM_CURRENCY;
COMMIT;


CREATE TABLE ATTENDANCE_SUMMARY_TEMP_PRINT (
    EMPLOYEE_KEY              DM_KEY NOT NULL,
    OPERATOR_KEY              DM_KEY NOT NULL,
    DATE_IN                   DM_DATE NOT NULL,
    DAY_IN                    DM_DAY,
    DATE_OUT                  DM_DATE NOT NULL,
    DAY_OUT                   DM_DAY,
    TIME_IN                   DM_TIME_IN_OUT,
    TIME_OUT                  DM_TIME_IN_OUT,
    MINUTES_WORKED_SHIFT      DM_TIME_IN_OUT,
    MINUTES_TARGET_SHIFT      DM_TIME_IN_OUT,
    MINUTES_VARIANCE_SHIFT    DM_TIME_IN_OUT,
    REPORT_IN                 DM_NAME,
    REPORT_OUT                DM_NAME
);


COMMIT;

ALTER TABLE ATTENDANCE_SUMMARY_TEMP_PRINT
ADD MINUTES_WORKED      DM_INTEGER;

ALTER TABLE ATTENDANCE_SUMMARY_TEMP_PRINT
ADD MINUTES_TARGET      DM_INTEGER;

ALTER TABLE ATTENDANCE_SUMMARY_TEMP_PRINT
ADD MINUTES_VARIANCE    DM_INTEGER;

ALTER TABLE ATTENDANCE_SUMMARY_TEMP_PRINT
ADD ATTENDANCE_STATUS_IN_KEY    DM_SMALLINT;

ALTER TABLE ATTENDANCE_SUMMARY_TEMP_PRINT
ADD ATTENDANCE_STATUS_OUT_KEY    DM_SMALLINT;

COMMIT;
